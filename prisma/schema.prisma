generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  PATIENT
  DOCTOR
}

enum MedicineTakenStatus {
  TAKEN
  NOT_TAKEN
  TAKEN_LATE
}

enum DosageType {
  MILLIGRAMS
  GRAMS
}

model Hospital {
  id        String      @id @default(uuid())
  name      String      @unique
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt @map("updated_at")
  users     User[]
  ListVideo ListVideo[]

  @@map("hospital")
}

model ListVideo {
  id         String   @id @default(uuid())
  title      String
  url        String
  hospital   Hospital @relation(fields: [hospitalId], references: [id])
  hospitalId String   @map("hospital_id")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@map("list-video")
}

model User {
  id                           String               @id @default(uuid())
  cpf                          String               @unique
  name                         String
  role_tag                     Role
  password                     String
  hospital                     Hospital             @relation(fields: [hospital_id], references: [id])
  hospital_id                  String
  createdAt                    DateTime             @default(now()) @map("created_at")
  updatedAt                    DateTime             @updatedAt @map("updated_at")
  medicalAppointmentsAsDoctor  MedicalAppointment[] @relation("doctorAppointments")
  medicalAppointmentsAsPatient MedicalAppointment[] @relation("patientAppointments")
  bloodPressure                BloodPressure[]
  medicine                     Medicine[]

  @@map("users")
}

model Medicine {
  id             String          @id @default(uuid())
  name           String
  color          String
  patient        User            @relation(fields: [patientId], references: [id])
  patientId      String          @map("patient_id")
  initialDate    DateTime        @map("initial_date")
  intervalInHour Int             @map("interval_in_hour")
  dosage         Int
  dosageType     DosageType      @map("dosage_type")
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")
  medicineTaken  MedicineTaken[]

  @@map("medicine")
}

model MedicineTaken {
  id         String              @id @default(uuid())
  medicine   Medicine            @relation(fields: [medicineId], references: [id])
  medicineId String              @map("medicine_id")
  status     MedicineTakenStatus
  createdAt  DateTime            @default(now()) @map("created_at")
  updatedAt  DateTime            @updatedAt @map("updated_at")

  @@map("medicine-taken")
}

model BloodPressure {
  id        String   @id @default(uuid())
  patient   User     @relation(fields: [patientId], references: [id])
  patientId String   @map("patient_id")
  systolic  Int
  diastolic Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("blood-pressure")
}

model MedicalAppointment {
  id        String   @id @default(uuid())
  date      DateTime
  doctor    User     @relation("doctorAppointments", fields: [doctorId], references: [id])
  doctorId  String   @map("doctor_id")
  patient   User     @relation("patientAppointments", fields: [patientId], references: [id])
  patientId String   @map("patient_id")
  exam      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("medical-appointment")
}
